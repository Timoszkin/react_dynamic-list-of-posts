{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","App.tsx","index.tsx"],"names":["BASE_URL","getAllUserPosts","fetch","then","result","json","PostsList","props","selectedPostID","selectedUserID","selectCurrentPostID","useState","postList","setPostList","useEffect","res","userID","toString","className","length","map","el","userId","body","type","onClick","id","NewCommentForm","addCommentFunc","name","setName","email","setEmail","comment","setComment","onSubmit","event","preventDefault","placeholder","onChange","target","value","PostDetails","postID","postToDisplay","setPost","currentComments","setComments","isVisibleComment","setCommentVisibility","isVisiblePost","setPostVisibility","getPostsDetails","post","getPostComments","commentId","newAr","filter","com","method","response","newComment","postId","createdAt","String","Date","updatedAt","options","headers","JSON","stringify","addComment","newComArr","App","postDisplayed","setPostDisplay","currentUserID","setCurrentUserID","currenPostID","setCurrentPostID","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.030dd33d.chunk.js","sourcesContent":["import Post from '../types/postType';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nconst getAllUserPosts = (): Promise<Post[]> => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(result => result.json());\n};\n\nexport default getAllUserPosts;\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\nimport getAllUserPosts from '../../api/api';\nimport Post from '../../types/postType';\n\ntype PostListProps = {\n  selectedUserID: string,\n  selectedPostID: number,\n  selectCurrentPostID: (id: number) => void,\n};\n\nexport const PostsList: React.FC<PostListProps> = (props: PostListProps) => {\n  const { selectedPostID, selectedUserID, selectCurrentPostID } = props;\n  const [postList, setPostList] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getAllUserPosts()\n      .then(res => setPostList(res));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserID !== '0') {\n      getUserPosts(selectedUserID.toString())\n        .then(res => setPostList(res));\n    } else {\n      getAllUserPosts()\n        .then(res => setPostList(res));\n    }\n  }, [selectedUserID]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postList.length > 0\n          ? postList.map(el => {\n            return (\n              <li\n                className=\"PostsList__item\"\n                key={el.id}\n              >\n                <div>\n                  <b>\n                    [User #\n                    {el.userId}\n                    ]:\n                  </b>\n                  {el.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => selectCurrentPostID(el.id)}\n                >\n                  {selectedPostID === el.id ? 'Close' : 'Open'}\n                </button>\n              </li>\n            );\n          })\n          : 'Loading posts'}\n      </ul>\n    </div>\n  );\n};\n","import Post from '../types/postType';\nimport { BASE_URL } from './api';\n\nexport const getUserPosts = (userID:string): Promise<Post[]> => {\n  return fetch(`${BASE_URL}/posts?userId=${userID}`)\n    .then(result => result.json());\n};\n\nexport const getPostsDetails = (postID:number): Promise<Post> => {\n  return fetch(`${BASE_URL}/posts/${postID.toString()}`)\n    .then(result => result.json());\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype NewCommentFormProps = {\n  addCommentFunc:(name: string, email: string, body: string) => void,\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = (props) => {\n  const { addCommentFunc } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addCommentFunc(name, email, comment);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => setName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => setEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => setComment(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostsDetails } from '../../api/posts';\nimport Post from '../../types/postType';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport Comment from '../../types/commentType';\n\ntype PostDetailsProps = {\n  postID: number,\n};\n\nexport const PostDetails: React.FC<PostDetailsProps> = (props: PostDetailsProps) => {\n  const { postID } = props;\n  const [postToDisplay, setPost] = useState<Post>();\n  const [currentComments, setComments] = useState<Comment[]>([]);\n  const [isVisibleComment, setCommentVisibility] = useState(true);\n  const [isVisiblePost, setPostVisibility] = useState(false);\n  const addNewComment = (name: string, email: string, body: string) => {\n    const newComment: Comment = {\n      id: currentComments.length,\n      postId: postID,\n      name,\n      email,\n      body,\n      createdAt: String(new Date()),\n      updatedAt: String(new Date()),\n    };\n\n    addComment(newComment);\n\n    const newComArr = [...currentComments, newComment];\n\n    setComments(newComArr);\n  };\n\n  useEffect(() => {\n    if (postID !== 0) {\n      getPostsDetails(postID)\n        .then(post => setPost(post));\n      setCommentVisibility(true);\n      setPostVisibility(true);\n      getPostComments(postID)\n        .then(res => setComments(res));\n    } else {\n      setCommentVisibility(false);\n      setPostVisibility(false);\n    }\n  }, [postID]);\n\n  return postToDisplay && isVisiblePost\n    ? (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{isVisiblePost && postToDisplay?.body}</p>\n        </section>\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setCommentVisibility(!isVisibleComment)}\n          >\n            {isVisibleComment\n              ? 'Hide'\n              : 'Show'}\n            {' '}\n            {currentComments.length}\n            {' '}\n            comments\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            {\n              isVisibleComment && currentComments.map(el => {\n                return (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={el.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        const newAr = currentComments.filter(com => com.id !== el.id);\n\n                        setComments(newAr);\n                        deleteComment(el.id);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{el.body}</p>\n                  </li>\n                );\n              })\n            }\n          </ul>\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm addCommentFunc={addNewComment} />\n          </div>\n        </section>\n      </div>\n    )\n    : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n      </div>\n    );\n};\n","import Comment from '../types/commentType';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = (postID:number): Promise<Comment[]> => {\n  return fetch(`${BASE_URL}/comments?postId=${postID.toString()}`)\n    .then(result => result.json());\n};\n\nexport const addComment = (newComment: Partial<Comment>) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  };\n\n  return fetch(`${BASE_URL}/comments`, options)\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number): Promise<Comment> => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then(response => response.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [postDisplayed, setPostDisplay] = useState(false);\n  const [currentUserID, setCurrentUserID] = useState('');\n  const [currenPostID, setCurrentPostID] = useState(0);\n  const handleCloseOpen = (id: number) => {\n    if (id === currenPostID) {\n      setCurrentPostID(0);\n    } else {\n      setCurrentPostID(id);\n    }\n  };\n\n  useEffect(() => setPostDisplay(true), []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label\n          htmlFor=\"userSelect\"\n        >\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={({ target: { value } }) => {\n              setCurrentUserID(value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {postDisplayed && (\n            <PostsList\n              selectedPostID={currenPostID}\n              selectedUserID={currentUserID}\n              selectCurrentPostID={handleCloseOpen}\n            />\n          )}\n          {!postDisplayed\n            ? 'Posts loading...'\n            : ''}\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails postID={currenPostID} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}